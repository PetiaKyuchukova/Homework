// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: proto.proto

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HNServiceClient is the client API for HNService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HNServiceClient interface {
	GetTopTenArticles(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageReply, error)
}

type hNServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHNServiceClient(cc grpc.ClientConnInterface) HNServiceClient {
	return &hNServiceClient{cc}
}

func (c *hNServiceClient) GetTopTenArticles(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageReply, error) {
	out := new(MessageReply)
	err := c.cc.Invoke(ctx, "/chat.HNService/GetTopTenArticles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HNServiceServer is the server API for HNService service.
// All implementations must embed UnimplementedHNServiceServer
// for forward compatibility
type HNServiceServer interface {
	GetTopTenArticles(context.Context, *MessageRequest) (*MessageReply, error)
	mustEmbedUnimplementedHNServiceServer()
}

// UnimplementedHNServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHNServiceServer struct {
}

func (UnimplementedHNServiceServer) GetTopTenArticles(context.Context, *MessageRequest) (*MessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopTenArticles not implemented")
}
func (UnimplementedHNServiceServer) mustEmbedUnimplementedHNServiceServer() {}

// UnsafeHNServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HNServiceServer will
// result in compilation errors.
type UnsafeHNServiceServer interface {
	mustEmbedUnimplementedHNServiceServer()
}

func RegisterHNServiceServer(s grpc.ServiceRegistrar, srv HNServiceServer) {
	s.RegisterService(&HNService_ServiceDesc, srv)
}

func _HNService_GetTopTenArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HNServiceServer).GetTopTenArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.HNService/GetTopTenArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HNServiceServer).GetTopTenArticles(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HNService_ServiceDesc is the grpc.ServiceDesc for HNService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HNService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.HNService",
	HandlerType: (*HNServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTopTenArticles",
			Handler:    _HNService_GetTopTenArticles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto.proto",
}
