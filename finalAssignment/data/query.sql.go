// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package data

import (
	"context"
	"database/sql"
)

const createList = `-- name: CreateList :execresult
INSERT INTO lists (id,name, user_id) VALUES (?,?,?)
`

type CreateListParams struct {
	ID     int64  `json:"id"`
	Name   string `json:"name"`
	UserID int32  `json:"user_id"`
}

func (q *Queries) CreateList(ctx context.Context, arg CreateListParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createList, arg.ID, arg.Name, arg.UserID)
}

const createTask = `-- name: CreateTask :execresult
INSERT INTO tasks(id,list_id, text, completed) VALUES (?,?, ?, ?)
`

type CreateTaskParams struct {
	ID        int64  `json:"id"`
	ListID    int32  `json:"list_id"`
	Text      string `json:"text"`
	Completed bool   `json:"completed"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createTask,
		arg.ID,
		arg.ListID,
		arg.Text,
		arg.Completed,
	)
}

const createUser = `-- name: CreateUser :execresult
INSERT INTO users(id,username, password) VALUES (?,?,?)
`

type CreateUserParams struct {
	ID       int64  `json:"id"`
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser, arg.ID, arg.Username, arg.Password)
}

const deleteAllLists = `-- name: DeleteAllLists :exec
DELETE FROM lists
`

func (q *Queries) DeleteAllLists(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllLists)
	return err
}

const deleteAllTasks = `-- name: DeleteAllTasks :exec
DELETE FROM tasks
`

func (q *Queries) DeleteAllTasks(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllTasks)
	return err
}

const deleteList = `-- name: DeleteList :exec
DELETE FROM lists WHERE id=?
`

func (q *Queries) DeleteList(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteList, id)
	return err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks WHERE id=?
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const deleteTasksInsideList = `-- name: DeleteTasksInsideList :exec
DELETE FROM tasks WHERE list_id=?
`

func (q *Queries) DeleteTasksInsideList(ctx context.Context, listID int32) error {
	_, err := q.db.ExecContext(ctx, deleteTasksInsideList, listID)
	return err
}

const getAllLists = `-- name: GetAllLists :many
SELECT id, name, user_id FROM lists
`

func (q *Queries) GetAllLists(ctx context.Context) ([]List, error) {
	rows, err := q.db.QueryContext(ctx, getAllLists)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []List
	for rows.Next() {
		var i List
		if err := rows.Scan(&i.ID, &i.Name, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTasks = `-- name: GetAllTasks :many
SELECT id, text, completed, list_id FROM tasks
`

func (q *Queries) GetAllTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getAllTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.Completed,
			&i.ListID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getList = `-- name: GetList :one
SELECT id, name, user_id FROM lists
WHERE id = ?
`

func (q *Queries) GetList(ctx context.Context, id int64) (List, error) {
	row := q.db.QueryRowContext(ctx, getList, id)
	var i List
	err := row.Scan(&i.ID, &i.Name, &i.UserID)
	return i, err
}

const getTask = `-- name: GetTask :one
SELECT id, text, completed, list_id FROM tasks
WHERE id = ?
`

func (q *Queries) GetTask(ctx context.Context, id int64) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.Completed,
		&i.ListID,
	)
	return i, err
}

const getTasksInsideOfList = `-- name: GetTasksInsideOfList :many
SELECT id, text, completed, list_id FROM tasks
WHERE list_id = ?
`

func (q *Queries) GetTasksInsideOfList(ctx context.Context, listID int32) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasksInsideOfList, listID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.Completed,
			&i.ListID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTextOfTasksInsideOfList = `-- name: GetTextOfTasksInsideOfList :many
SELECT text FROM tasks
WHERE list_id = ?
`

func (q *Queries) GetTextOfTasksInsideOfList(ctx context.Context, listID int32) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getTextOfTasksInsideOfList, listID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var text string
		if err := rows.Scan(&text); err != nil {
			return nil, err
		}
		items = append(items, text)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, username, password FROM users
WHERE username = ?
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.Password)
	return i, err
}

const getUserLists = `-- name: GetUserLists :many
SELECT id, name, user_id FROM lists
WHERE user_id = ?
`

func (q *Queries) GetUserLists(ctx context.Context, userID int32) ([]List, error) {
	rows, err := q.db.QueryContext(ctx, getUserLists, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []List
	for rows.Next() {
		var i List
		if err := rows.Scan(&i.ID, &i.Name, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserPassword = `-- name: GetUserPassword :one
SELECT password FROM users
WHERE username = ?
`

func (q *Queries) GetUserPassword(ctx context.Context, username string) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserPassword, username)
	var password string
	err := row.Scan(&password)
	return password, err
}

const maxIdlist = `-- name: MaxIdlist :one
SELECT MAX(id) FROM lists
`

func (q *Queries) MaxIdlist(ctx context.Context) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, maxIdlist)
	var max interface{}
	err := row.Scan(&max)
	return max, err
}

const maxIdtask = `-- name: MaxIdtask :one
SELECT MAX(id) FROM tasks
`

func (q *Queries) MaxIdtask(ctx context.Context) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, maxIdtask)
	var max interface{}
	err := row.Scan(&max)
	return max, err
}

const toggleTask = `-- name: ToggleTask :exec
UPDATE tasks
SET completed=?
WHERE id=?
`

type ToggleTaskParams struct {
	Completed bool  `json:"completed"`
	ID        int64 `json:"id"`
}

func (q *Queries) ToggleTask(ctx context.Context, arg ToggleTaskParams) error {
	_, err := q.db.ExecContext(ctx, toggleTask, arg.Completed, arg.ID)
	return err
}
