// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createArticle = `-- name: CreateArticle :execresult
INSERT INTO articles (
  id, title, score, time
) VALUES (
  ?, ?, ?, ?
)
`

type CreateArticleParams struct {
	ID    int32
	Title string
	Score int32
	Time  string
}

func (q *Queries) CreateArticle(ctx context.Context, arg CreateArticleParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createArticle,
		arg.ID,
		arg.Title,
		arg.Score,
		arg.Time,
	)
}

const deleteArticles = `-- name: DeleteArticles :exec
DELETE FROM articles
`

func (q *Queries) DeleteArticles(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteArticles)
	return err
}

const getArticles = `-- name: GetArticles :many
SELECT id, title, score, time FROM articles
`

func (q *Queries) GetArticles(ctx context.Context) ([]Article, error) {
	rows, err := q.db.QueryContext(ctx, getArticles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Article
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Score,
			&i.Time,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
